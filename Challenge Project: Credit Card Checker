// All valid credit card numbers
const valid1 = [4, 5, 3, 9, 6, 7, 7, 9, 0, 8, 0, 1, 6, 8, 0, 8];
const valid2 = [5, 5, 3, 5, 7, 6, 6, 7, 6, 8, 7, 5, 1, 4, 3, 9];
const valid3 = [3, 7, 1, 6, 1, 2, 0, 1, 9, 9, 8, 5, 2, 3, 6];
const valid4 = [6, 0, 1, 1, 1, 4, 4, 3, 4, 0, 6, 8, 2, 9, 0, 5];
const valid5 = [4, 5, 3, 9, 4, 0, 4, 9, 6, 7, 8, 6, 9, 6, 6, 6];

// All invalid credit card numbers
const invalid1 = [4, 5, 3, 2, 7, 7, 8, 7, 7, 1, 0, 9, 1, 7, 9, 5];
const invalid2 = [5, 7, 9, 5, 5, 9, 3, 3, 9, 2, 1, 3, 4, 6, 4, 3];
const invalid3 = [3, 7, 5, 7, 9, 6, 0, 8, 4, 4, 5, 9, 9, 1, 4];
const invalid4 = [6, 0, 1, 1, 1, 2, 7, 9, 6, 1, 7, 7, 7, 9, 3, 5];
const invalid5 = [5, 3, 8, 2, 0, 1, 9, 7, 7, 2, 8, 8, 3, 8, 5, 4];

// Can be either valid or invalid
const mystery1 = [3, 4, 4, 8, 0, 1, 9, 6, 8, 3, 0, 5, 4, 1, 4];
const mystery2 = [5, 4, 6, 6, 1, 0, 0, 8, 6, 1, 6, 2, 0, 2, 3, 9];
const mystery3 = [6, 0, 1, 1, 3, 7, 7, 0, 2, 0, 9, 6, 2, 6, 5, 6, 2, 0, 3];
const mystery4 = [4, 9, 2, 9, 8, 7, 7, 1, 6, 9, 2, 1, 7, 0, 9, 3];
const mystery5 = [4, 9, 1, 3, 5, 4, 0, 4, 6, 3, 0, 7, 2, 5, 2, 3];

// An array of all the arrays above
const batch = [valid1, valid2, valid3, valid4, valid5, invalid1, invalid2, invalid3, invalid4, invalid5, mystery1, mystery2, mystery3, mystery4, mystery5];


// Add your functions below:
const mysteryCards = [mystery1, mystery2, mystery3, mystery4, mystery5];
const reducer = (prev, curr) => prev + curr; // Defining reducer function

function validateCred(creditArr) { 
  for(let i = 0; i < creditArr.length; i++) { // Double every other number
    if(i % 2 === 0) {
      if(creditArr[i] * 2 > 9) { // Subtract by nine if product is larger than 9
        creditArr[i] = creditArr[i] * 2 - 9;
        continue;
      }
      creditArr[i] *= 2;
      continue;
    } 
  }
  return creditArr.reduce(reducer) % 10 === 0 ? true : false; // Return true if modulo 10 is 0
}

function findInvalidCards(nestedArr) {
  let invalidArr = []; // Creating new empty array
  for(const arr of nestedArr) {
    if(!validateCred(arr)) {
      invalidArr.push(arr); // Store only invalid card sequences into a new array
    }
  }
  return invalidArr;
}

const invalidCards = findInvalidCards(mysteryCards); // Storing invalid mystery cards into variable

function idInvalideCardCompanies(nestedArr) {
  let comparisonArr = []; // Creating an array to check for duplicates
  let companyArr = []; // Creating an array to store unique company identifiers

  for(const cardArr of nestedArr) {
      if(cardArr[0] === 3 & !comparisonArr.includes(3)) { // If 3 and unique: Amex
        companyArr.push('Amex (American Express)');
        comparisonArr.push(3);
      } else if(cardArr[0] === 4 & !comparisonArr.includes(4)) { // If 4 and unique: Visa
        companyArr.push('Visa');
        comparisonArr.push(4);
      }
      else if(cardArr[0] === 5 & !comparisonArr.includes(5)) { // If 4 and unique: Mastercard
        companyArr.push('Mastercard');
        comparisonArr.push(5);
      }
      else if(cardArr[0] === 6 & !comparisonArr.includes(6)) { // If 6 and unique: Discover
        companyArr.push('Discover');
        comparisonArr.push(6);
      } else if(![3,4,5,6].includes(cardArr[0])){ // If none of the numbers: indicate as such
        companyArr.push('Company not found');
      }
  }

  return companyArr;
}

const invalidCardCompanies = idInvalideCardCompanies(invalidCards); // Storing company identifiers that have issued invalid cards

const dashes = '- -- - -- - - -- - -- - - -- - -- - - -- - -- - - -- - -- -\n';

console.log('All possible invalid cards:');
console.log(mysteryCards);
console.log(dashes);
console.log('Invalid cards:');
console.log(invalidCards);
console.log(dashes);
console.log('Companies who provided invalid cards:');
console.log(invalidCardCompanies);
